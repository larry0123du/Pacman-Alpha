#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sampsite:server');
var http = require('http');
var User = require('../models/user');
// var User = 

// define SocketServer
const SocketServer = require('ws').Server;
/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '3000');

// The following 2 lines commented out
 var port = process.env.PORT || 3000;
 app.set('port', port);

/**
 * Create HTTP server.
 */

// The line below commented out
 var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// The 3 lines below commented out
server.listen(port);

server.on('error', onError);
server.on('listening', onListening);

// Use WebSocket here
const wss = new SocketServer({ server });
wss.on('connection', (ws) => {
  console.log("Client connected");
  // ws.send("hello");
  ws.on('message', (msg) => {
    score = msg;
    console.log("SCORE:"+msg);

    User.find({}).limit(1).exec(function(err,user){
      console.log("First user:"+user.email);
    })

    User.findById(msg.userid)
    .exec(function(error, user){
      if(error || user == null)
        console.log('Can\'t find user!!');

      console.log("Email:"+user.email+ "\nusername:"+user.username+"\nPW:"+user.password+"\nPWConf:"+user.passwordConf+"\nGP:"+user.gamesPlayed);
      user.password = user.passwordConf;
      user.gamesPlayed = user.gamesPlayed + 1;
      score = 5;
      if(score > user.highScore)
      { 
        user.highScore = score;
      }
      else
        user.highScore = user.highScore;

      console.log("Email:"+user.email+ "\nusername:"+user.username+"\nPW:"+user.password+"\nPWConf:"+user.passwordConf+"\nGP:"+user.gamesPlayed);

      user.save().then(function (err){
        if(err){
          console.log('UPDATE ERROR!');
        }

        // res.redirect('/profile');
      });
  });



    ws.send('got the score');
  });
  ws.on('close', () => {
    console.log('Client disconnected');
  });
});


// var websock = wss;
// module.exports = websock;

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
