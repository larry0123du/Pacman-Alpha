#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sampsite:server');
var http = require('http');
var User = require('../models/user');
var Multipac = require('../public/javascripts/multiPac.js');

var gamestate = Array(20).fill().map(
    () => Array(33).fill('N'));

// var User = 

// define SocketServer
const SocketServer = require('ws').Server;

var clientList =[];
var Pacmen = [];
/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '3000');

// The following 2 lines commented out
 var port = process.env.PORT || 3000;
 app.set('port', port);

/**
 * Create HTTP server.
 */

// The line below commented out
 var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// The 3 lines below commented out
server.listen(port);

server.on('error', onError);
server.on('listening', onListening);

// Use WebSocket here
const wss = new SocketServer({ server });
var Clients = [];
wss.on('connection', (ws) => {
  console.log("Client connected");
  // ws.send("hello");
  ws.on('message', (msg) => {
    data = JSON.parse(msg);
    if(data.type == "multi player")
    {
      console.log("MULTIPLAYER:"+msg);
      var pos = {
        'x': Math.floor(Math.random()*20),
        'y': Math.floor(Math.random()*33)
      }

      while(gamestate[pos.x][pos.y] == 'P')
      {
        pos = {
        'x': Math.floor(Math.random()*20),
        'y': Math.floor(Math.random()*33)
          }
      }

      var pacId = {
        "id": data.id,
        "pacId": new Multipac.Pacman(data.id, "yellow", pos) 
      }


      Clients.push(pacId);
      Pacmen.push(pacId.pacId);
      
      console.log(gamestate);
      console.log(JSON.stringify(gamestate));
      ws.send(JSON.stringify(gamestate));

    }
    else if(data.type == "move")
    {
      moveUser(data);
      ws.send(gameState);
    }
    else
    {

      score = JSON.parse(msg);
      // console.log("MSG:"+msg);
      // console.log("SCORE:"+score);
      // console.log("VALUE:"+score.userid);
      // console.log("ID:"+msg.userid);



        User.findById(score.userid)
        .exec(function(error, user){
          console.log("GOT USER:"+user);

          user.password = user.passwordConf;
          user.gamesPlayed = user.gamesPlayed + 1;
          // score = 70;
          if(score.score > user.highScore)
          { 
            user.highScore = score.score;
          }
          else
            user.highScore = user.highScore;

          console.log("Email:"+user.email+ "\nusername:"+user.username+"\nPW:"+user.password+"\nPWConf:"+user.passwordConf+"\nGP:"+user.gamesPlayed);

          user.save().then(function (err){
            if(err){
              console.log('UPDATE ERROR!');
            }

            // res.redirect('/profile');
          });
      });

    }


    ws.send('got a message');
  });
  ws.on('close', () => {
    console.log('Client disconnected');
  });
});


//type:move
//action: (string) west|south|north|east
//id
function moveUser(data){
  for(var i= Clients.length -1; i>=0; i-=1)
  {
    if(Clients[i].id == data.id)
    {
      var action;
      switch(data.action)
      {
        case "WEST": action = multipac.dirs.WEST;
                      break;
        case "SOUTH": action = multipac.dirs.SOUTH;
                    break;
        case "NORTH": action = multipac.dirs.NORTH;
                    break;
        case "EAST": action = multipac.dirs.EAST;
                    break;
        default: action = multipac.dirs.NONE; 
       }

      multipac.updatePacman(Clients[i].pacId, action, Pacmen, gamestate)
    }
  }
}


// var websock = wss;
// module.exports = websock;

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
